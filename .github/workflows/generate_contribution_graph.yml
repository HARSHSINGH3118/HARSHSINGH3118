name: Update GitHub Contribution Graph

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight every day
  workflow_dispatch:  # Allows you to manually trigger the workflow from the Actions tab

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # Step 3: Install the required libraries
    - name: Install Dependencies
      run: |
        pip install matplotlib PyGithub

    # Step 4: Run the Python script to generate the contribution graph
    - name: Generate Contribution Graph
      run: |
        python <<EOF
        import matplotlib.pyplot as plt
        from github import Github
        import datetime

        # GitHub Personal Access Token (use GitHub secret here)
        ACCESS_TOKEN = '${{ secrets.GITHUB_TOKEN }}'
        
        # Replace with your GitHub username
        USERNAME = 'HARSHSINGH3118'

        # Initialize GitHub object
        g = Github(ACCESS_TOKEN)
        user = g.get_user(USERNAME)

        # Get repository contributions (you can exclude forks if desired)
        repos = user.get_repos()
        
        commit_dates = []
        
        # Fetch commit data from all repos
        for repo in repos:
            try:
                commits = repo.get_commits(author=user)
                for commit in commits:
                    commit_dates.append(commit.commit.author.date.date())
            except:
                continue  # Some repos might not have commits or access might be restricted

        # Sort the commit dates
        commit_dates.sort()

        # Create date ranges for plotting
        start_date = commit_dates[0]
        end_date = commit_dates[-1]
        date_range = [start_date + datetime.timedelta(days=i) for i in range((end_date - start_date).days + 1)]

        # Count the commits per day
        commit_counts = [commit_dates.count(day) for day in date_range]

        # Apply dark background style
        plt.style.use('dark_background')

        # Plot the graph with dark theme
        plt.figure(figsize=(10, 5))
        plt.plot(date_range, commit_counts, marker='o', linestyle='-', color='#00FF00')  # Neon green color for the line
        plt.fill_between(date_range, commit_counts, color='#00AA00', alpha=0.3)  # Darker green fill

        # Customizing labels and title
        plt.title(f'{USERNAME} GitHub Contribution Graph', color='white')
        plt.xlabel('Date', color='white')
        plt.ylabel('Commits', color='white')

        # Grid and tight layout with dark background in mind
        plt.grid(True, color='gray', linestyle='--', alpha=0.5)
        plt.tight_layout()

        # Save the graph as a PNG file
        plt.savefig('github_contribution_graph.png')

        EOF

    # Step 5: Commit and push the updated graph to the repository
    - name: Commit and Push
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add github_contribution_graph.png
        git commit -m "Updated GitHub contribution graph with dark theme"
        git push
